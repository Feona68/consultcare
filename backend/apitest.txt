$url = "http://localhost:5000/api/addorupdatepatient"
$body = @{
    flag = "INS"
    pat_id = $null  # Not needed for insert
    regNo = $null   # Set regNo to null for insert
    name = "Alice Smith"
    dob = "1985-05-15"
    address = "456 Elm St"
    phoneNo = "7871366917"
    email = "alicesmith@example.com"
    sex = "F"
}

# Convert the body to JSON and send the request
$response = Invoke-RestMethod -Uri $url -Method Post -Body ($body | ConvertTo-Json -Depth 10) -ContentType "application/json"

# Output the response
$response


# Define the API URL for updating a patient
$apiUrl = "http://localhost:5000/api/patients/update/:id"

# Define the form data for updating the patient
$formData = @{
    pat_id    = 1  # Replace with the patient ID you want to update
    pat_name  = "John Doe Updated"
    pat_dob   = "1990-06-01"
    pat_adr   = "456 Updated Address"
    pat_ph_no = "0987654321"
    pat_email = "johnupdated@example.com"
    pat_sex   = "M"
    pat_reg_no = "R1"  # The registration number (required for updates)
    flag      = "UPD"
}

# Convert the form data to JSON
$jsonData = $formData | ConvertTo-Json

# Try to send the request and catch errors
try {
    # Send POST request with JSON data for updating the patient
    $response = Invoke-RestMethod -Uri $apiUrl -Method POST -Body $jsonData -ContentType "application/json"
    
    # Display the response
    Write-Host "Response: " ($response | ConvertTo-Json -Depth 3)
} catch {
    # Handle error
    Write-Host "Error: " $_.Exception.Message
}


$uri = "http://localhost:5000/api/patients/update/1"  # Replace '6' with the actual patient ID
$body = @{
    pat_name  = "John Doe"
    pat_dob   = "1990-01-01"
    pat_adr   = "123 Main St"
    pat_ph_no = "1234567890"
    pat_email = "john.doe@example.com"
    pat_sex   = "M"
    pat_reg_no = $null
}

$response = Invoke-RestMethod -Uri $uri -Method Put -Body ($body | ConvertTo-Json) -ContentType "application/json"
$response


$doctorId = "2"
$uri = "http://localhost:5000/api/available-dates/$doctorId"
$response = Invoke-RestMethod -Uri $uri -Method Get
$response | ConvertTo-Json -Depth 10


$uri = "http://localhost:5000/api/book-appointment"
$body = @{
    doctorId = 1
    patientId = 2
    appointmentDate = "2024-10-14"
    timeSlot = "10:00:00 - 10:30:00"
    tokenNumber = 1
}

# Convert the body to JSON
$jsonBody = $body | ConvertTo-Json

# Send the POST request
$response = Invoke-RestMethod -Uri $uri -Method Post -Body $jsonBody -ContentType "application/json"

# Output the response
$response

# Define the API URI for viewing appointments
$patientId = 1  # Replace with the actual patient ID you want to query
$flag = 3
$uri = "http://localhost:5000/api/appointments/${patientId,flag}"

# Send the GET request
$response = Invoke-RestMethod -Uri $uri -Method Get -ContentType "application/json"

# Output the response
$response

# Define the API endpoint and request body
$apiUrl = "http://localhost:5000/api/appointments/cancel/25"  # Use the appointment ID directly in the URL
$headers = @{ "Content-Type" = "application/json" }

# Send the DELETE request to the cancel appointment API
$response = Invoke-RestMethod -Uri $apiUrl -Method Delete -Headers $headers

# Output the response
$response

# Define the API endpoint and request body
$apiUrl = "http://localhost:5000/api/appointments/update" # Update the URL
$headers = @{ "Content-Type" = "application/json" }

# Define the appointment details
$body = @{
    appointmentId = 24 # Change this to the ID of the appointment you want to update
    newAppointmentDate = "2024-10-19" # Change this to the new date
    newTimeSlot = "10:00:00" # Change this to the new time slot
} | ConvertTo-Json

# Send the POST request to the update appointment API
$response = Invoke-RestMethod -Uri $apiUrl -Method Post -Body $body -Headers $headers

# Output the response
$response

# Define the API endpoint and request body
$apiUrl = "http://localhost:5000/api/appointments/update"
$headers = @{ "Content-Type" = "application/json" }

# Define the appointment details
$body = @{
    appointmentId = 24
    newAppointmentDate = "2024-10-19"
    newTimeSlot = "10:00:00"
} | ConvertTo-Json

# Send the POST request to the update appointment API
$response = Invoke-RestMethod -Uri $apiUrl -Method Post -Body $body -Headers $headers

# Output the response
$response


# Define the API endpoint and request body
$apiUrl = "http://localhost:5000/api/appointments/update"
$headers = @{ "Content-Type" = "application/json" }

# Define the appointment details
$body = @{
    appointmentId = 24
    newAppointmentDate = "2024-10-16"
    newTimeSlot = "17:00:00"
} | ConvertTo-Json

# Send the POST request to the update appointment API
$response = Invoke-RestMethod -Uri $apiUrl -Method Post -Body $body -Headers $headers

# Output the response
$response

# Define the API endpoint (appointmentId should be replaced with the actual ID)
$appointmentId = 24
$apiUrl = "http://localhost:5000/api/appointments/cancel/$appointmentId"

# Send the DELETE request to the cancel appointment API
$response = Invoke-RestMethod -Uri $apiUrl -Method Delete

# Output the response
$response



# Define the API endpoint and request body
$apiUrl = "http://localhost:5000/api/appointments/update"
$headers = @{ "Content-Type" = "application/json" }

# Define the appointment details to be updated
$body = @{
    appointmentId = 19
    doctorId = 5
    patientId = 2
    appointmentDate = "2024-10-18"
    timeSlot = "12:45:00"
    tokenNumber = 45
} | ConvertTo-Json

# Send the POST request to the update appointment API
$response = Invoke-RestMethod -Uri $apiUrl -Method Post -Body $body -Headers $headers

# Output the response
$response



# Define the API URL
$apiUrl = "http://localhost:5000/api/login/staff"

# Define the login credentials
$credentials = @{
    staffUsername = "johndoe"
    staffPassword = "password123"
}

# Convert credentials to JSON
$jsonBody = $credentials | ConvertTo-Json

# Send the POST request
$response = Invoke-RestMethod -Uri $apiUrl -Method Post -Body $jsonBody -ContentType "application/json"

# Display the response
$response


# Define the API endpoint URL
$apiUrl = "http://localhost:5000/api/appointments/update/20"  # Replace 40 with the actual appointment ID you want to update

# Create the body for the request
$body = @{
    doctorId = 2
    patientId = 2
    appointmentDate = "2024-10-21 18:30:00"  # Change to DATETIME format
    timeSlot = "09:00:00"
    tokenNumber = 5
}

# Convert the body to JSON format
$jsonBody = $body | ConvertTo-Json

# Send the PUT request
$response = Invoke-RestMethod -Uri $apiUrl -Method Put -Body $jsonBody -ContentType "application/json"

# Output the response
$response



# Define the API URI for viewing appointments
$patientId = 1  # Replace with the actual patient ID you want to query
$flag = 1
$uri = "http://localhost:5000/api/appointments/$patientId?flag=$flag"

# Send the GET request
$response = Invoke-RestMethod -Uri $uri -Method Get -ContentType "application/json"

# Output the response
$response



# Define the appointment ID for which you want to fetch medicines
$appointmentId = 55 # Replace with an actual appointment ID

# Define the API URL
$medicinesApiUrl = "http://localhost:5000/api/medicines/$appointmentId"

# Send a GET request to the medicines API
$response = Invoke-RestMethod -Uri $medicinesApiUrl -Method Get

# Output the response
if ($response) {
    Write-Host "Medicines retrieved successfully for Appointment ID: $appointmentId"
    $response | Format-Table -AutoSize
} else {
    Write-Host "No medicines found or an error occurred."
}


# Define the API URL and doctor ID
$doctorId = 1  # Replace with the actual doctor ID you want to test
$apiUrl = "http://localhost:5000/api/doctor/$doctorId"

# Send GET request to the API
try {
    $response = Invoke-RestMethod -Uri $apiUrl -Method GET
    Write-Host "API response:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 10
}
catch {
    Write-Host "Error occurred: $($_.Exception.Message)" -ForegroundColor Red
}

# Define the API URL
$apiUrl = "http://localhost:5000/api/patients?flag=1"

# Send GET request to the API
try {
    $response = Invoke-RestMethod -Uri $apiUrl -Method GET
    Write-Host "API response:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 10
}
catch {
    Write-Host "Error occurred: $($_.Exception.Message)" -ForegroundColor Red
}

# Define the API URL
$apiUrl = "http://localhost:5000/api/patients?flag=2&searchValue=John%20Doe"

# Send GET request to the API
try {
    $response = Invoke-RestMethod -Uri $apiUrl -Method GET
    Write-Host "API response:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 10
}
catch {
    Write-Host "Error occurred: $($_.Exception.Message)" -ForegroundColor Red
}

# Define the API URL
$apiUrl = "http://localhost:5000/api/patients?flag=3&searchValue=R12"


# Send GET request to the API
try {
    $response = Invoke-RestMethod -Uri $apiUrl -Method GET
    Write-Host "API response:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 10
}
catch {
    Write-Host "Error occurred: $($_.Exception.Message)" -ForegroundColor Red
}

# Define the API URL
$apiUrl = "http://localhost:5000/api/patients?flag=4&searchValue=1234567890"

# Send GET request to the API
try {
    $response = Invoke-RestMethod -Uri $apiUrl -Method GET
    Write-Host "API response:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 10
}
catch {
    Write-Host "Error occurred: $($_.Exception.Message)" -ForegroundColor Red
}


# Define the API URL for Appointments
$appointmentsApiUrlFlag1 = "http://localhost:5000/api/appointments?flag=1"

# Send GET request to the Appointments API for flag 1
try {
    $appointmentsResponseFlag1 = Invoke-RestMethod -Uri $appointmentsApiUrlFlag1 -Method GET
    Write-Host "Flag 1 - List All Appointments response:" -ForegroundColor Green
    $appointmentsResponseFlag1 | ConvertTo-Json -Depth 10
}
catch {
    Write-Host "Error occurred for Flag 1: $($_.Exception.Message)" -ForegroundColor Red
}

# Define the API URL for Appointments
$doctorName = "Dr. John Doe"  # Change this to a valid doctor name in your database
$appointmentsApiUrlFlag2 = "http://localhost:5000/api/appointments?flag=2&searchValue=$([uri]::EscapeDataString($doctorName))"

# Send GET request to the Appointments API for flag 2
try {
    $appointmentsResponseFlag2 = Invoke-RestMethod -Uri $appointmentsApiUrlFlag2 -Method GET
    Write-Host "Flag 2 - List Appointments by Doctor Name response:" -ForegroundColor Green
    $appointmentsResponseFlag2 | ConvertTo-Json -Depth 10
}
catch {
    Write-Host "Error occurred for Flag 2: $($_.Exception.Message)" -ForegroundColor Red
}


# Define the API URL for Appointments
$patientName = "John Doe"  # Change this to a valid patient name in your database
$appointmentsApiUrlFlag3 = "http://localhost:5000/api/appointments?flag=3&searchValue=$([uri]::EscapeDataString($patientName))"

# Send GET request to the Appointments API for flag 3
try {
    $appointmentsResponseFlag3 = Invoke-RestMethod -Uri $appointmentsApiUrlFlag3 -Method GET
    Write-Host "Flag 3 - List Appointments by Patient Name response:" -ForegroundColor Green
    $appointmentsResponseFlag3 | ConvertTo-Json -Depth 10
}
catch {
    Write-Host "Error occurred for Flag 3: $($_.Exception.Message)" -ForegroundColor Red
}


# Define the API URL for Appointments
$appointmentDate = "2024-10-22"  # Change this to a valid date in your database
$appointmentsApiUrlFlag4 = "http://localhost:5000/api/appointments?flag=4&searchValue=$appointmentDate"

# Send GET request to the Appointments API for flag 4
try {
    $appointmentsResponseFlag4 = Invoke-RestMethod -Uri $appointmentsApiUrlFlag4 -Method GET
    Write-Host "Flag 4 - List Appointments by Date response:" -ForegroundColor Green
    $appointmentsResponseFlag4 | ConvertTo-Json -Depth 10
}
catch {
    Write-Host "Error occurred for Flag 4: $($_.Exception.Message)" -ForegroundColor Red
}


# If you want to test with only registration number
$inputRegNo = "R11"  # Change this to a valid registration number in your database
$inputPhoneNo = ""  # Use an empty string for testing
$patientIdApiUrl = "http://localhost:5000/api/get-patient-id?regNo=$inputRegNo&phNo=$inputPhoneNo"
# Prepare the body for the POST request
$body = @{
    reg_no = $inputRegNo
    phone_no = $inputPhoneNo
}

# Send POST request to the Patient ID API
try {
    $patientIdResponse = Invoke-RestMethod -Uri "http://localhost:5000/api/get-patient-id" -Method POST -Body ($body | ConvertTo-Json) -ContentType "application/json"
    Write-Host "Patient ID Retrieval Response:" -ForegroundColor Green
    $patientIdResponse | ConvertTo-Json -Depth 10 | Write-Host
}
catch {
    Write-Host "Error occurred while retrieving patient ID: $($_.Exception.Message)" -ForegroundColor Red
}

