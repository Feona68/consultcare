//login patient 

DELIMITER //

CREATE PROCEDURE LoginUser(
    IN input_phone_no VARCHAR(15),
    IN input_dob DATE,
    OUT output_patient_id INT,
    OUT output_message VARCHAR(255)
)
BEGIN
    DECLARE user_exists INT;
    DECLARE patient_status VARCHAR(10);

    -- Check if the user exists with the provided phone number and date of birth
    SELECT COUNT(*) INTO user_exists
    FROM Patient
    WHERE pat_ph_no = input_phone_no AND pat_dob = input_dob;

    -- If user exists, retrieve the patient ID and status
    IF user_exists = 1 THEN
        SELECT pat_id, pat_status INTO output_patient_id, patient_status
        FROM Patient
        WHERE pat_ph_no = input_phone_no AND pat_dob = input_dob;

        -- Check the patient's status
        IF patient_status = 'A' THEN
            SET output_message = 'Login successful';
        ELSEIF patient_status = 'L' THEN
            SET output_message = 'Your account has been deleted. Please contact support if this is an error.';
            SET output_patient_id = NULL; -- Set to NULL since login fails
        END IF;
    ELSE
        -- If no matching user is found
        SET output_message = 'Invalid phone number or date of birth';
        SET output_patient_id = NULL; -- Set to NULL since login fails
    END IF;
END //

DELIMITER ;

// signup and edit patient 

DELIMITER //

CREATE PROCEDURE ManagePatientProfile(
    IN flag VARCHAR(3),                -- 'INS' for insert, 'UPD' for update, 'DEL' for delete
    IN in_pat_id INT,                  -- Patient ID (for update or delete)
    IN in_pat_name VARCHAR(60),        -- Patient Name (for insert or update)
    IN in_pat_dob DATE,                -- Patient Date of Birth (for insert or update)
    IN in_pat_adr VARCHAR(100),        -- Patient Address (for insert or update)
    IN in_pat_ph_no VARCHAR(15),       -- Patient Phone Number (for insert or update)
    IN in_pat_email VARCHAR(60),       -- Patient Email (for insert or update)
    IN in_pat_sex VARCHAR(1),          -- Patient Sex (for insert or update)
    IN in_pat_reg_no VARCHAR(10)     -- Patient Registration Number (for insert or update)
)
BEGIN
    DECLARE existing_phone INT;

    -- If flag is 'INS', check if the phone number already exists
    IF flag = 'INS' THEN
        SELECT COUNT(*) INTO existing_phone 
        FROM Patient 
        WHERE pat_ph_no = in_pat_ph_no;

        IF existing_phone > 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Phone number already exists.';
        ELSE
            INSERT INTO Patient (pat_name, pat_dob, pat_adr, pat_ph_no, pat_email, pat_sex, pat_reg_no, pat_status)
            VALUES (in_pat_name, in_pat_dob, in_pat_adr, in_pat_ph_no, in_pat_email, in_pat_sex, CONCAT('R', AutoGenerate('REG')),'A');
        END IF;

    -- If flag is 'UPD', check if the patient ID exists
    ELSEIF flag = 'UPD' THEN
        SELECT COUNT(*) INTO existing_phone 
        FROM Patient 
        WHERE pat_id = in_pat_id;

        IF existing_phone = 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Patient ID does not exist.';
        ELSE
            UPDATE Patient
            SET 
                pat_name = in_pat_name,
                pat_dob = in_pat_dob,
                pat_adr = in_pat_adr,
                pat_ph_no = in_pat_ph_no,
                pat_email = in_pat_email,
                pat_sex = in_pat_sex,
                pat_reg_no = in_pat_reg_no,
                pat_status = 'A'
            WHERE pat_id = in_pat_id;
        END IF;

    -- If flag is 'DEL', mark the patient as deleted
    ELSEIF flag = 'DEL' THEN
        SELECT COUNT(*) INTO existing_phone 
        FROM Patient 
        WHERE pat_id = in_pat_id;

        IF existing_phone = 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Patient ID does not exist.';
        ELSE
            UPDATE Patient
            SET 
                pat_status = 'L'  -- 'L' for locked or deleted status
            WHERE pat_id = in_pat_id;
        END IF;
    END IF;
END //

DELIMITER ;


//retrive patient details

DELIMITER //

CREATE PROCEDURE Retrieve_Pat_Details(
    IN input_pat_id INT,
    OUT patient_name VARCHAR(60),
    OUT patient_dob DATE,
    OUT patient_adr VARCHAR(100),
    OUT patient_ph_no VARCHAR(15),
    OUT patient_email VARCHAR(60),
    OUT patient_reg_no VARCHAR(10),  -- Changed to match the table definition
    OUT patient_sex VARCHAR(1),
    OUT patient_status VARCHAR(1)
)
BEGIN
    -- Initialize output variables
    SET patient_name = NULL;
    SET patient_dob = NULL;
    SET patient_adr = NULL;
    SET patient_ph_no = NULL;
    SET patient_email = NULL;
    SET patient_reg_no = NULL;  -- Changed to match the table definition
    SET patient_sex = NULL;
    SET patient_status = NULL;

    -- Query to retrieve patient details based on patient ID
    SELECT 
        p.pat_name, 
        p.pat_dob, 
        p.pat_adr, 
        p.pat_ph_no, 
        p.pat_email, 
        p.pat_reg_no, 
        p.pat_sex,
        p.pat_status
    INTO 
        patient_name, 
        patient_dob, 
        patient_adr, 
        patient_ph_no, 
        patient_email, 
        patient_reg_no,  -- Changed to match the table definition
        patient_sex,
        patient_status
    FROM 
        Patient AS p
    WHERE 
        p.pat_id = input_pat_id; -- Changed to match the column name in the Patient table

    -- Check if patient exists
    IF patient_name IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Patient not found';
    END IF;
END //

DELIMITER ;

//staff login

DELIMITER //

CREATE PROCEDURE LoginStaff(IN staffUsername VARCHAR(255))
BEGIN
    DECLARE staff_pswd VARCHAR(255);
    DECLARE staff_status CHAR(1);   -- Status will be 'A' or 'L'
    DECLARE staff_type CHAR(1);     -- Staff type will be 'A' (Admin) or 'D' (Doctor)
    DECLARE msg VARCHAR(255);

    -- Fetch the staff password, status, and type
    SELECT stf_pswd, stf_status, stf_type INTO staff_pswd, staff_status, staff_type
    FROM Staff
    WHERE stf_username = staffUsername;

    -- Check if the staff exists and status is active
    IF staff_pswd IS NULL THEN
        SET msg = 'Invalid credentials.';
    ELSEIF staff_status = 'L' THEN
        SET msg = 'Account is locked.';
    ELSEIF staff_status = 'A' THEN
        SET msg = 'Login successful.';
    END IF;

    -- Set output parameters
    SET @staff_type = staff_type;
    SET @message = msg;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE GetDoctorDetails(IN doctorId INT)
BEGIN
    SELECT stf_id, stf_name,stf_username, stf_speciality, stf_email, stf_ph_no, 
           stf_qualification, stf_experience, stf_sex, stf_img_path,stf_pswd
    FROM Staff
    WHERE stf_id = doctorId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE UpdateDoctorPassword(IN doctorId INT, IN newPassword VARCHAR(100))
BEGIN
    UPDATE Staff
    SET stf_pswd = newPassword
    WHERE stf_id = doctorId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE GetAdminDetails(IN adminId INT)
BEGIN
    SELECT stf_id, stf_name,stf_username, stf_speciality, stf_email, stf_ph_no, 
           stf_qualification, stf_experience, stf_sex, stf_img_path,stf_pswd
    FROM Staff
    WHERE stf_id = adminId;
END //
DELIMITER ;


DELIMITER //

CREATE PROCEDURE updateAdminDetails(
    IN adminId INT,
    IN adminName VARCHAR(60),
    IN adminUsername VARCHAR(50),
    IN adminSex VARCHAR(1),
    IN adminEmail VARCHAR(60),
    IN adminPhoneNo VARCHAR(15),
    IN adminSpeciality VARCHAR(50),
    IN adminPassword VARCHAR(100),
    IN adminExperience VARCHAR(500),
    IN adminQualification VARCHAR(100)
)
BEGIN
    UPDATE Staff
    SET stf_name = adminName,
        stf_username = adminUsername,
        stf_sex = adminSex,
        stf_email = adminEmail,
        stf_ph_no = adminPhoneNo,
        stf_speciality = adminSpeciality,
        stf_pswd = adminPassword,
        stf_experience = adminExperience,
        stf_qualification = adminQualification
    WHERE stf_id = adminId;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE GetPatientsByDoctor(IN staff_id INT)
BEGIN
    SELECT p.pat_reg_no AS regNo,
           p.pat_name AS name,
           TIMESTAMPDIFF(YEAR, p.pat_dob, CURDATE()) AS age,
           p.pat_sex AS sex,
           p.pat_ph_no AS phoneNumber
    FROM Patient p
    JOIN Appointment a ON p.pat_id = a.appt_pat_id
    WHERE a.appt_stf_id = staff_id 
    AND p.pat_status = 'A'
    GROUP BY p.pat_id;
END //

DELIMITER ;


DELIMITER //

CREATE PROCEDURE GetTodayAppointments(IN staffId INT)
BEGIN
    SELECT 
        a.appt_tok_no AS tokenNo,
        p.pat_reg_no AS regNo,
        p.pat_name AS name,
        YEAR(CURDATE()) - YEAR(p.pat_dob) AS age,
        p.pat_sex AS sex
    FROM 
        Appointment a
    JOIN 
        Patient p ON a.appt_pat_id = p.pat_id
    WHERE 
        a.appt_stf_id = staffId 
        AND a.appt_date = CURDATE() 
        AND a.appt_status = 'B'
        AND p.pat_status = 'A'
    ORDER BY 
        a.appt_tok_no;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE CreateLeave(
    IN p_stf_id INT,
    IN p_hol_date DATE,
    IN p_hol_type VARCHAR(3),
    IN p_hol_reason VARCHAR(200)
)
BEGIN
    INSERT INTO Holiday (hol_stf_id, hol_date, hol_type, hol_reason, hol_status) 
    VALUES (p_stf_id, p_hol_date, p_hol_type, p_hol_reason, 'W');
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE GetLeaveHistory(
    IN p_stf_id INT
)
BEGIN
    SELECT * FROM Holiday WHERE hol_stf_id = p_stf_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE UpdateLeave(
    IN p_hol_id INT,
    IN p_hol_type VARCHAR(3),
    IN p_hol_date DATE,
    IN p_hol_reason VARCHAR(200)
)
BEGIN
    UPDATE Holiday
    SET hol_type = p_hol_type, hol_date = p_hol_date, hol_reason = p_hol_reason, hol_status = 'W'
    WHERE hol_id = p_hol_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE DeleteLeave(
    IN p_hol_id INT
)
BEGIN
    DELETE FROM Holiday WHERE hol_id = p_hol_id;
END //
DELIMITER ;
 

 DELIMITER //
CREATE PROCEDURE GetAllLeaves()
BEGIN
    SELECT h.hol_id, h.hol_date, h.hol_type, h.hol_reason, h.hol_status, s.stf_name
    FROM Holiday h
    JOIN Staff s ON h.hol_stf_id = s.stf_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ApproveRejectLeave(
    IN p_hol_id INT,
    IN p_status VARCHAR(10)
)
BEGIN
    UPDATE Holiday
    SET hol_status = p_status
    WHERE hol_id = p_hol_id;
END //
DELIMITER ;

DELIMITER //

CREATE PROCEDURE GetLeavesByStatus(IN leaveStatus VARCHAR(20))
BEGIN
  SELECT h.hol_id, h.hol_date, h.hol_type, h.hol_reason, h.hol_status, s.stf_name
    FROM Holiday h
    JOIN Staff s ON h.hol_stf_id = s.stf_id WHERE h.hol_status = leaveStatus;
END //

DELIMITER ;



DELIMITER //

CREATE PROCEDURE AddNewChart(
    IN patientRegNo VARCHAR(10),
    IN doctorId INT,
    IN appointmentDate DATE,
    IN patientCondition TEXT,
    IN diagnosis TEXT,
    IN remarks TEXT,
    IN medName VARCHAR(100),
    IN medDosage VARCHAR(50),
    IN medDuration VARCHAR(30),
    IN medInstruction TINYTEXT,
    IN medRemarks TINYTEXT
)
BEGIN
    DECLARE new_cons_id INT;
    DECLARE patientId INT;
    DECLARE apptId INT;

    -- Get patient ID from the Patient table based on the patient registration number
    SELECT pat_id INTO patientId 
    FROM Patient 
    WHERE pat_reg_no = patientRegNo;

    -- Check if the appointment exists
    SELECT appt_id INTO apptId
    FROM Appointment 
    WHERE appt_date = appointmentDate 
      AND appt_pat_id = patientId 
      AND appt_stf_id = doctorId
    LIMIT 1;

    -- Debug: Check if appointment exists
    IF apptId IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Appointment does not exist';
    END IF;

    -- Check if a consultation already exists for this appointment
    SELECT cons_id INTO new_cons_id
    FROM Consultation
    WHERE cons_appt_id = apptId
    LIMIT 1;

    -- If no consultation exists, insert a new one
    IF new_cons_id IS NULL THEN
        INSERT INTO Consultation (cons_appt_id, cons_stf_id, cons_pat_id, cons_pat_condition, cons_diagnosis, cons_remarks)
        VALUES (apptId, doctorId, patientId, patientCondition, diagnosis, remarks);
        
        -- Get the last inserted consultation ID
        SET new_cons_id = LAST_INSERT_ID();
    END IF;

    -- Insert into Medication table, associating with the existing or newly created consultation
    INSERT INTO Medication (med_cons_id, med_appt_id, med_name, med_dosage, med_duration, med_instruction, med_remarks)
    VALUES (new_cons_id, apptId, medName, medDosage, medDuration, medInstruction, medRemarks);
END //

DELIMITER ;



DELIMITER //

CREATE TRIGGER after_consultation_insert
AFTER INSERT ON Consultation
FOR EACH ROW
BEGIN
    -- Update the appointment status from 'B' to 'F' for the corresponding appointment
    UPDATE Appointment
    SET appt_status = 'F'
    WHERE appt_id = NEW.cons_appt_id AND appt_status = 'B';
END;

//

DELIMITER ;
